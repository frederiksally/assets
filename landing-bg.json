{
  "history": [
    {
      "breakpoints": [],
      "visible": true,
      "aspectRatio": 1,
      "layerType": "effect",
      "type": "gradient",
      "speed": 0.25,
      "trackMouse": 0,
      "mouseMomentum": 0,
      "animating": false,
      "isMask": 0,
      "compiledFragmentShaders": [
        "#version 300 es\nprecision highp float;\n\nin vec2 vTextureCoord;\nuniform vec2 uMousePos;\n\nvec3 getColor(int index) {\n  switch(index) {\n    case 0: return vec3(1.0, 1.0, 1.0);\n    case 1: return vec3(1.0, 1.0, 1.0);\n    case 2: return vec3(1.0, 1.0, 1.0);\n    case 3: return vec3(1.0, 1.0, 1.0);\n    case 4: return vec3(1.0, 1.0, 1.0);\n    case 5: return vec3(1.0, 1.0, 1.0);\n    case 6: return vec3(1.0, 1.0, 1.0);\n    case 7: return vec3(1.0, 1.0, 1.0);\n    case 8: return vec3(1.0, 1.0, 1.0);\n    case 9: return vec3(1.0, 1.0, 1.0);\n    case 10: return vec3(1.0, 1.0, 1.0);\n    case 11: return vec3(1.0, 1.0, 1.0);\n    case 12: return vec3(1.0, 1.0, 1.0);\n    case 13: return vec3(1.0, 1.0, 1.0);\n    case 14: return vec3(1.0, 1.0, 1.0);\n    case 15: return vec3(1.0, 1.0, 1.0);\n    default: return vec3(1.0);\n  }\n}\n\nconst float PI = 3.14159265;\n\nvec2 rotate(vec2 coord, float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return vec2(coord.x * c - coord.y * s, coord.x * s + coord.y * c);\n}\n\nout vec4 fragColor;\n\nvec3 getColor(vec2 uv) {\n  return vec3(1.0, 1.0, 1.0);\n}\n\nvoid main() {\n  vec2 uv = vTextureCoord;\n  vec2 pos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos - 0.5), 0.00);\n  uv -= pos;\n  uv /= (0.50 * 2.);\n  uv = rotate(uv, (0.00 - 0.5) * 2. * PI);\n  vec4 color = vec4(getColor(uv), 1);\n  fragColor = color;\n}\n"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision mediump float;\n\nin vec3 aVertexPosition;\nin vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nout vec2 vTextureCoord;\nout vec3 vVertexPosition;\n\nvoid main() {\n  gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n  vTextureCoord = aTextureCoord;\n}\n"
      ],
      "data": {
        "depth": false,
        "uniforms": {}
      }
    },
    {
      "breakpoints": [],
      "visible": true,
      "aspectRatio": 1,
      "layerType": "effect",
      "type": "beam",
      "radius": 0.86,
      "speed": 0.25,
      "trackMouse": 0.1,
      "mouseMomentum": 1,
      "animating": false,
      "isMask": 0,
      "states": {
        "appear": [
          {
            "type": "appear",
            "id": "16bc630c-4f69-4908-8825-1eadd908ec06",
            "prop": "radius",
            "transition": {
              "duration": 4000,
              "ease": "easeOutExpo",
              "delay": 250
            },
            "complete": false,
            "progress": 0,
            "initialStateSet": false,
            "value": 0,
            "uniformData": {
              "type": "1f",
              "name": "uRadius"
            }
          }
        ],
        "scroll": [],
        "hover": []
      },
      "compiledFragmentShaders": [
        "#version 300 es\nprecision highp float;\n\nin vec2 vTextureCoord;\nuniform sampler2D uTexture;\nuniform float uRadius;\nuniform vec2 uMousePos;\nuniform vec2 uResolution;\n\nvec3 blend (int blendMode, vec3 src, vec3 dst) { \n  return src + dst; \n}\n\nvec3 Tonemap_tanh(vec3 x) {\n  x = clamp(x, -40.0, 40.0);\n  return (exp(x) - exp(-x)) / (exp(x) + exp(-x));\n}\n\nfloat random(vec2 seed) { \n  return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nout vec4 fragColor;\n\nconst float PI = 3.14159265359;\nconst float TWO_PI = 2.0 * PI;\n\nmat2 rot(float a) { \n  return mat2(cos(a), -sin(a), sin(a), cos(a)); \n}\n\nvec3 drawPoint(vec2 uv, vec2 center, float scale) {\n  uv.x *= uResolution.x / uResolution.y;\n  center.x *= uResolution.x / uResolution.y;\n  vec2 skew = vec2(0.50, 1.0 - 0.50) * 2.0;\n  uv = uv * rot(0.16 * TWO_PI) * skew;\n  center = center * rot(0.16 * TWO_PI) * skew;\n  float dist = distance(uv, center);\n  float radius = scale * 0.25;\n  float brightness = radius / dist;\n  return brightness * vec3(0.85, 0.93, 0.98);\n}\n\nvec3 getBeam(vec2 uv) {\n  vec2 pos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos - 0.5), 0.10);\n  return drawPoint(uv, pos, uRadius);\n}\n\nvoid main() {\n  vec2 uv = vTextureCoord;\n  vec4 bg = texture(uTexture, uv);\n  vec3 beam = getBeam(uv);\n  float dither = (random(gl_FragCoord.xy) - 0.5) / 255.0;\n  vec3 blended = blend(1, Tonemap_tanh(beam), bg.rgb);\n  vec3 result = mix(bg.rgb, blended, 1.00);\n  result += dither;\n  fragColor = vec4(result, bg.a);\n}\n"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision mediump float;\n\nin vec3 aVertexPosition;\nin vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uTextureMatrix;\nout vec2 vTextureCoord;\nout vec3 vVertexPosition;\n\nvoid main() {\n  gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n  vTextureCoord = (uTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;\n}\n"
      ],
      "data": {
        "depth": false,
        "uniforms": {}
      }
    },
    {
      "breakpoints": [],
      "visible": true,
      "aspectRatio": 1,
      "layerType": "effect",
      "type": "gradientMap",
      "speed": 0.5,
      "animating": false,
      "mouseMomentum": 0,
      "isMask": 0,
      "compiledFragmentShaders": [
        "#version 300 es\nprecision highp float;\n\nin vec2 vTextureCoord;\nuniform sampler2D uTexture;\nuniform float uTime;\n\nvec3 getColor(int index) {\n  switch(index) {\n    case 0: return vec3(1.0, 1.0, 1.0);\n    case 1: return vec3(0.90, 0.93, 0.98);\n    case 2: return vec3(0.85, 0.98, 0.85);\n    case 3: return vec3(0.93, 0.85, 0.98);\n    case 4: return vec3(0.98, 0.85, 0.93);\n    case 5: return vec3(1.0, 1.0, 1.0);\n    default: return vec3(1.0, 1.0, 1.0);\n  }\n}\n\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 linear_from_srgb(vec3 rgb) {\n  return pow(rgb, vec3(2.2));\n}\n\nvec3 srgb_from_linear(vec3 lin) {\n  return pow(lin, vec3(1.0/2.2));\n}\n\nvec3 oklab_mix(vec3 lin1, vec3 lin2, float a) {\n  const mat3 kCONEtoLMS = mat3(\n    0.4121656120, 0.2118591070, 0.0883097947,\n    0.5362752080, 0.6807189584, 0.2818474174,\n    0.0514575653, 0.1074065790, 0.6302613616\n  );\n  const mat3 kLMStoCONE = mat3(\n    4.0767245293, -1.2681437731, -0.0041119885,\n    -3.3072168827, 2.6093323231, -0.7034763098,\n    0.2307590544, -0.3411344290, 1.7068625689\n  );\n  vec3 lms1 = pow(kCONEtoLMS * lin1, vec3(1.0/3.0));\n  vec3 lms2 = pow(kCONEtoLMS * lin2, vec3(1.0/3.0));\n  vec3 lms = mix(lms1, lms2, a);\n  lms *= 1.0 + 0.02 * a * (1.0 - a);\n  return kLMStoCONE * (lms * lms * lms);\n}\n\nvec3 getGradientColor(float position) {\n  for (int i = 0; i < 5; i++) {\n    float colorPosition = float(i) / 5.0;\n    float nextColorPosition = float(i + 1) / 5.0;\n    if (position <= nextColorPosition) {\n      float mixFactor = (position - colorPosition) / (nextColorPosition - colorPosition);\n      vec3 linStart = linear_from_srgb(getColor(i));\n      vec3 linEnd = linear_from_srgb(getColor(i + 1));\n      vec3 mixedLin = oklab_mix(linStart, linEnd, mixFactor);\n      return srgb_from_linear(mixedLin);\n    }\n  }\n  return srgb_from_linear(getColor(4));\n}\n\nout vec4 fragColor;\n\nvoid main() {\n  vec2 uv = vTextureCoord;\n  vec4 color = texture(uTexture, uv);\n  float position = smoothstep(0.0, 1.0, color.r) * (0.40 * 2.0);\n  float posOffset = (dot(vec2(0.5, 0.5).x, vec2(0.5, 0.5).y) + 0.22 + 0.0001) * 2.0;\n  position -= (uTime * 0.01 + posOffset);\n  float cycle = floor(position);\n  bool reverse = int(cycle) % 2 == 0;\n  float animatedPos = reverse ? fract(-position) : fract(position);\n  animatedPos = reverse ? animatedPos - 1.0 / 5.0 : animatedPos - 1.0 / 5.0;\n  animatedPos = clamp(animatedPos, 0.0 - 1.0 / 5.0, 1.0);\n  color.rgb = getGradientColor(animatedPos);\n  float dither = rand(gl_FragCoord.xy) * 0.005;\n  color.rgb += dither;\n  fragColor = color;\n}\n"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision mediump float;\n\nin vec3 aVertexPosition;\nin vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nout vec2 vTextureCoord;\nout vec3 vVertexPosition;\n\nvoid main() {\n  gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n  vTextureCoord = aTextureCoord;\n}\n"
      ],
      "data": {
        "depth": false,
        "uniforms": {}
      }
    },
    {
      "breakpoints": [],
      "visible": true,
      "aspectRatio": 1,
      "layerType": "effect",
      "type": "noise",
      "speed": 0.11,
      "trackMouse": 0,
      "mouseMomentum": 0,
      "animating": true,
      "isMask": 0,
      "compiledFragmentShaders": [
        "#version 300 es\nprecision highp float;\n\nin vec2 vTextureCoord;\nin vec3 vVertexPosition;\n\nuniform sampler2D uTexture;\nuniform vec2 uMousePos;\nuniform vec2 uResolution;\n\nfloat ease (int easingFunc, float t) { \n  return t; \n}\n\nout vec4 fragColor;\n\nvoid main() {\n  vec2 noise = vTextureCoord;\n  vec2 uv = vVertexPosition.xy;\n  float aspectRatio = uResolution.x / uResolution.y;\n  vec2 mPos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos - 0.5), 0.00);\n  vec2 pos = mPos;\n  float dist = ease(0, max(0.0, 1.0 - distance(uv * vec2(aspectRatio, 1.0), mPos * vec2(aspectRatio, 1.0)) * 4.0 * (1.0 - 1.00)));\n  uv = mix(uv, noise, dist);\n  vec4 color = texture(uTexture, uv);\n  fragColor = color;\n}\n"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision highp float;\n\nin vec3 aVertexPosition;\nin vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uTextureMatrix;\nout vec3 vVertexPosition;\nout vec2 vTextureCoord;\n\nuniform float uTime;\nuniform vec2 uMousePos;\nuniform vec2 uResolution;\n\nvec4 permute(vec4 t) { return t * (t * 34.0 + 133.0); }\n\nvec3 grad(float hash) {\n  vec3 cube = mod(floor(hash / vec3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;\n  vec3 cuboct = cube;\n  float index0 = step(0.0, 1.0 - floor(hash / 16.0));\n  float index1 = step(0.0, floor(hash / 16.0) - 1.0);\n  cuboct.x *= 1.0 - index0;\n  cuboct.y *= 1.0 - index1;\n  cuboct.z *= 1.0 - (1.0 - index0 - index1);\n  float type = mod(floor(hash / 8.0), 2.0);\n  vec3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));\n  vec3 grad = cuboct * 1.22474487139 + rhomb;\n  grad *= (1.0 - 0.042942436724648037 * type) * 3.5946317686139184;\n  return grad;\n}\n\nvec4 bccNoiseDerivativesPart(vec3 X) {\n  vec3 b = floor(X);\n  vec4 i4 = vec4(X - b, 2.5);\n  vec3 v1 = b + floor(dot(i4, vec4(0.25)));\n  vec3 v2 = b + vec3(1, 0, 0) + vec3(-1, 1, 1) * floor(dot(i4, vec4(-0.25, 0.25, 0.25, 0.35)));\n  vec3 v3 = b + vec3(0, 1, 0) + vec3(1, -1, 1) * floor(dot(i4, vec4(0.25, -0.25, 0.25, 0.35)));\n  vec3 v4 = b + vec3(0, 0, 1) + vec3(1, 1, -1) * floor(dot(i4, vec4(0.25, 0.25, -0.25, 0.35)));\n  vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0));\n  hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0));\n  hashes = mod(permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0)), 48.0);\n  vec3 d1 = X - v1;\n  vec3 d2 = X - v2;\n  vec3 d3 = X - v3;\n  vec3 d4 = X - v4;\n  vec4 a = max(0.75 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);\n  vec4 aa = a * a;\n  vec4 aaaa = aa * aa;\n  vec3 g1 = grad(hashes.x);\n  vec3 g2 = grad(hashes.y);\n  vec3 g3 = grad(hashes.z);\n  vec3 g4 = grad(hashes.w);\n  vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));\n  vec3 derivative = -8.0 * mat4x3(d1, d2, d3, d4) * (aa * a * extrapolations) + mat4x3(g1, g2, g3, g4) * aaaa;\n  return vec4(derivative, dot(aaaa, extrapolations));\n}\n\nvec4 bccNoiseDerivatives_XYBeforeZ(vec3 X) {\n  mat3 orthonormalMap = mat3(\n    0.788675134594813, -0.211324865405187, -0.577350269189626,\n    -0.211324865405187, 0.788675134594813, -0.577350269189626,\n    0.577350269189626, 0.577350269189626, 0.577350269189626\n  );\n  X = orthonormalMap * X;\n  vec4 result = bccNoiseDerivativesPart(X) + bccNoiseDerivativesPart(X + 144.5);\n  return vec4(result.xyz * orthonormalMap, result.w);\n}\n\nconst float PI = 3.14159265359;\n\nmat2 rot(float a) { \n  return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvoid main() {\n  vec3 vertexPosition = aVertexPosition;\n  vec2 textureCoord = (vertexPosition.xy + 1.0) / 2.0;\n  vec2 pos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos - 0.5), 0.00);\n  vec2 st = vec2(textureCoord.x * uResolution.x / uResolution.y, textureCoord.y) - pos;\n  st = rot(0.01 * -1.0 * 2.0 * PI) * (st);\n  vec4 noise = bccNoiseDerivatives_XYBeforeZ(vec3(st * vec2(0.50, 1.0 - 0.50) * 9.0 * 0.27, uTime * 0.02));\n  st.xy = mix(textureCoord, (noise.xy / 7.0 + 0.5), 0.15);\n  gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\n  vTextureCoord = (uTextureMatrix * vec4(st, 0.0, 1.0)).xy;\n  vVertexPosition = vec3(aTextureCoord, 0.0);\n}\n"
      ],
      "data": {
        "depth": false,
        "uniforms": {}
      }
    },
    {
      "breakpoints": [
        {
          "name": "Desktop",
          "min": 992,
          "max": null,
          "props": {
            "gradient": 0.6,
            "pos": {
              "type": "Vec2",
              "_x": 0.5,
              "_y": -0.19
            },
            "frequency": 0.15,
            "distortion": 0.18,
            "speed": 0.1
          }
        },
        {
          "min": 576,
          "name": "Tablet",
          "max": 991,
          "props": {
            "speed": 0.07
          }
        }
      ],
      "visible": true,
      "aspectRatio": 1,
      "layerType": "effect",
      "type": "blinds",
      "speed": 0.1,
      "trackMouse": 0,
      "mouseMomentum": 0,
      "animating": true,
      "isMask": 0,
      "compiledFragmentShaders": [
        "#version 300 es\nprecision mediump float;\n\nin vec2 vTextureCoord;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform vec2 uMousePos;\nuniform vec2 uResolution;\n\nfloat ease (int easingFunc, float t) { return t; }\n\nconst float STEPS = 10.0;\nconst float PI = 3.14159265359;\n\nmat2 rot(float a) { return mat2(cos(a), -sin(a), sin(a), cos(a)); }\n\nvec2 scaleAspect(vec2 st, float aspectRatio) { return st * vec2(aspectRatio, 1.0); }\n\nvec2 unscaleAspect(vec2 st) { float aspectRatio = uResolution.x / uResolution.y; return st * vec2(1.0 / aspectRatio, 1.0); }\n\nvec2 rotate(vec2 st, float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  mat2 rot = mat2(c, -s, s, c);\n  return rot * st;\n}\n\nstruct StructFunc {\n  vec2 st;\n  vec3 distort;\n};\n\nStructFunc style4(vec2 st, vec2 pos, float divisions, float dist, float amount, vec3 first, vec3 second, vec3 third) {\n  vec2 diff = st - pos;\n  float radius = length(diff);\n  float segment = fract(radius * divisions - uTime * 0.01);\n  vec3 distort = mix(mix(first, second, segment * 2.0), mix(second, third, (segment - 0.5) / (1.0 - 0.5)), step(0.5, segment));\n  st -= pow(distort.r, dist) / 10.0 * amount * normalize(diff);\n  st += pow(distort.b, dist) / 10.0 * amount * normalize(diff);\n  st = rot(0.12 * 2.0 * PI) * (st - pos) + pos;\n  st = unscaleAspect(st);\n  return StructFunc(st, distort);\n}\n\nStructFunc getStyle(vec2 st, vec2 pos, float divisions, float dist, float amount, vec3 first, vec3 second, vec3 third) {\n  return style4(st, pos, divisions, dist, amount, first, second, third);\n}\n\nvec4 blinds(vec2 st, float mDist) {\n  float aspectRatio = uResolution.x / uResolution.y;\n  vec2 pos = vec2(0.5, 1.19) + mix(vec2(0), (uMousePos - 0.5), 0.00) * floor(1.00);\n  pos = scaleAspect(pos, aspectRatio);\n  st = scaleAspect(st, aspectRatio);\n  st = rotate(st - pos, -1.0 * 0.12 * 2.0 * PI) + pos;\n  vec3 first = vec3(1.0, 0.0, 0.0);\n  vec3 second = vec3(0.0, 1.0, 0.0);\n  vec3 third = vec3(0.0, 0.0, 1.0);\n  float divisions = 2.0 + 0.15 * 10.0;\n  float dist = 0.18 * 4.0 + 1.0;\n  float amount = 0.30 * mDist;\n  StructFunc result = getStyle(st, pos, divisions, dist, amount, first, second, third);\n  vec4 color = texture(uTexture, result.st);\n  return color;\n}\n\nout vec4 fragColor;\n\nvoid main() {\n  vec2 uv = vTextureCoord;\n  float aspectRatio = uResolution.x / uResolution.y;\n  vec2 mPos = vec2(0.5, 1.19) + mix(vec2(0), (uMousePos - 0.5), 0.00);\n  vec2 pos = mPos;\n  float mDist = ease(0, max(0.0, 1.0 - distance(uv * vec2(aspectRatio, 1.0), mPos * vec2(aspectRatio, 1.0)) * 4.0 * (1.0 - 1.00)));\n  vec4 col = blinds(uv, mDist);\n  fragColor = col;\n}\n"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision mediump float;\n\nin vec3 aVertexPosition;\nin vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uTextureMatrix;\nout vec2 vTextureCoord;\nout vec3 vVertexPosition;\n\nvoid main() {\n  gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n  vTextureCoord = (uTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;\n}\n"
      ],
      "data": {
        "depth": false,
        "uniforms": {}
      }
    },
    {
      "breakpoints": [],
      "visible": true,
      "aspectRatio": 1,
      "layerType": "effect",
      "type": "dither",
      "speed": 0.5,
      "animating": false,
      "mouseMomentum": 0,
      "isMask": 0,
      "compiledFragmentShaders": [
        "#version 300 es\nprecision mediump float;\n\nin vec3 vVertexPosition;\nin vec2 vTextureCoord;\n\nuniform sampler2D uTexture;\nuniform float uTime;\n\nconst int MAX_LEVEL = 4;\n\nfloat random(vec2 seed) {\n  return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat getRandNoise(vec2 st, vec2 offset) {\n  return fract(sin(dot(st + offset, vec2(12.9898, 78.233))) * 43758.5453) + 0.001;\n}\n\nvec3 dither(vec3 color, vec2 st) {\n  float delta = floor(uTime);\n  vec2 offset = vec2(random(vec2(123,16) + delta), random(vec2(56,96) + delta));\n  float noise = getRandNoise(st, offset);\n  color += (noise - 0.505) * 0.50;\n  return round(color * (1.0 / 0.50)) * 0.50;\n}\n\nout vec4 fragColor;\n\nvoid main() {\n  vec2 uv = vTextureCoord;\n  float delta = floor(uTime);\n  vec4 color = texture(uTexture, uv);\n  if(color.a == 0.0) { \n    fragColor = vec4(0.0);\n    return;\n  }\n  color.rgb = mix(color.rgb, dither(color.rgb, uv), 0.1);\n  fragColor = color;\n}\n"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision mediump float;\n\nin vec3 aVertexPosition;\nin vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uTextureMatrix;\nout vec2 vTextureCoord;\nout vec3 vVertexPosition;\n\nvoid main() {\n  gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n  vTextureCoord = (uTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;\n}\n"
      ],
      "data": {
        "depth": false,
        "uniforms": {},
        "texture": {
          "src": "https://assets.unicorn.studio/media/blue_noise_med.png",
          "sampler": "uBlueNoise"
        }
      }
    }
  ],
  "options": {
    "name": "BG from top center",
    "fps": 30,
    "dpi": 1.5,
    "scale": 1,
    "includeLogo": false,
    "isProduction": false,
    "freePlan": false
  },
  "version": "1.3.2",
  "id": "UoU6tCsTzJZXfkwww1zf"
}
